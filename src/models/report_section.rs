//! Contains structs and functions for doing operations on report_section relations.
//!
//! A report_section a mapping from a section to a report that will contain it, along with
//! associated metadata.  Represented in the database by the REPORT_SECTION table.

use crate::models::report::ReportData;
use crate::schema::report_section;
use crate::schema::report_section::dsl::*;
use crate::util;
use chrono::NaiveDateTime;
use core::fmt;
use diesel::prelude::*;
use log::error;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// Mapping to a report_section mapping as it exists in the REPORT_SECTION table in the
/// database.
///
/// An instance of this struct will be returned by any queries for report_sections.
#[derive(Queryable, Deserialize, Serialize, PartialEq, Debug)]
pub struct ReportSectionData {
    pub report_id: Uuid,
    pub section_id: Uuid,
    pub position: i32,
    pub created_at: NaiveDateTime,
    pub created_by: Option<String>,
}

/// Represents all possible parameters for a query of the REPORT_SECTION table
///
/// All values are optional, so any combination can be used during a query.  Limit and offset are
/// used for pagination.  Sort expects a comma-separated list of sort keys, optionally enclosed
/// with either asc() or desc().  For example: asc(report_id),desc(section_id),position
#[derive(Deserialize)]
pub struct ReportSectionQuery {
    pub report_id: Option<Uuid>,
    pub section_id: Option<Uuid>,
    pub position: Option<i32>,
    pub created_before: Option<NaiveDateTime>,
    pub created_after: Option<NaiveDateTime>,
    pub created_by: Option<String>,
    pub sort: Option<String>,
    pub limit: Option<i64>,
    pub offset: Option<i64>,
}

/// A new report_section mapping to be inserted into the DB
///
/// report_id, section_id, and position are all required fields, but created_by is not
/// created_at is populated automatically by the DB
#[derive(Deserialize, Serialize, Insertable)]
#[table_name = "report_section"]
pub struct NewReportSection {
    pub report_id: Uuid,
    pub section_id: Uuid,
    pub position: i32,
    pub created_by: Option<String>,
}

/// Represents an error generated by an attempt at creating a row in the REPORT_SECTION table
///
/// Creates can fail either because of a diesel error or because there are non-failed run_reports
/// associated with the report referenced by the row
#[derive(Debug)]
pub enum CreateError {
    DB(diesel::result::Error),
    Prohibited(String),
}

impl std::error::Error for CreateError {}

impl fmt::Display for CreateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            CreateError::DB(e) => write!(f, "CreateError DB {}", e),
            CreateError::Prohibited(e) => write!(f, "CreateError Prohibited {}", e),
        }
    }
}

impl From<diesel::result::Error> for CreateError {
    fn from(e: diesel::result::Error) -> CreateError {
        CreateError::DB(e)
    }
}

/// Represents an error generated by an attempt at deleting a row in the REPORT_SECTION table
///
/// Deletes can fail either because of a diesel error or because there are non-failed runs
/// associated with the report referenced by the row
#[derive(Debug)]
pub enum DeleteError {
    DB(diesel::result::Error),
    Prohibited(String),
}

impl std::error::Error for DeleteError {}

impl fmt::Display for DeleteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            DeleteError::DB(e) => write!(f, "DeleteError DB {}", e),
            DeleteError::Prohibited(e) => write!(f, "DeleteError Prohibited {}", e),
        }
    }
}

impl From<diesel::result::Error> for DeleteError {
    fn from(e: diesel::result::Error) -> DeleteError {
        DeleteError::DB(e)
    }
}

impl ReportSectionData {
    /// Queries the DB for a report_section relationship for the specified ids
    ///
    /// Queries the DB using `conn` to retrieve the first row with a report_id matching
    /// `query_report_id` and a section_id matching `query_section_id`
    /// Returns a result containing either the retrieved report_section mapping as a
    /// ReportSectionData instance or an error if the query fails for some reason or if no
    /// mapping is found matching the criteria
    pub fn find_by_report_and_section(
        conn: &PgConnection,
        query_report_id: Uuid,
        query_section_id: Uuid,
    ) -> Result<Self, diesel::result::Error> {
        report_section
            .filter(section_id.eq(query_section_id))
            .filter(report_id.eq(query_report_id))
            .first::<Self>(conn)
    }

    /// Queries the DB for report_section mappings matching the specified query criteria
    ///
    /// Queries the DB using `conn` to retrieve report_section mappings matching the criteria in
    /// `params`
    /// Returns a result containing either a vector of the retrieved report_section mappings as
    /// ReportSectionData instances or an error if the query fails for some reason
    pub fn find(
        conn: &PgConnection,
        params: ReportSectionQuery,
    ) -> Result<Vec<Self>, diesel::result::Error> {
        // Put the query into a box (pointer) so it can be built dynamically
        let mut query = report_section.into_boxed();

        // Add filters for each of the params if they have values
        if let Some(param) = params.report_id {
            query = query.filter(report_id.eq(param));
        }
        if let Some(param) = params.section_id {
            query = query.filter(section_id.eq(param));
        }
        if let Some(param) = params.position {
            query = query.filter(position.eq(param));
        }
        if let Some(param) = params.created_before {
            query = query.filter(created_at.lt(param));
        }
        if let Some(param) = params.created_after {
            query = query.filter(created_at.gt(param));
        }
        if let Some(param) = params.created_by {
            query = query.filter(created_by.eq(param));
        }

        // If there is a sort param, parse it and add to the order by clause accordingly
        if let Some(sort) = params.sort {
            let sort = util::parse_sort_string(&sort);
            for sort_clause in sort {
                match &sort_clause.key[..] {
                    "report_id" => {
                        if sort_clause.ascending {
                            query = query.then_order_by(report_id.asc());
                        } else {
                            query = query.then_order_by(report_id.desc());
                        }
                    }
                    "section_id" => {
                        if sort_clause.ascending {
                            query = query.then_order_by(section_id.asc());
                        } else {
                            query = query.then_order_by(section_id.desc());
                        }
                    }
                    "position" => {
                        if sort_clause.ascending {
                            query = query.then_order_by(position.asc());
                        } else {
                            query = query.then_order_by(position.desc());
                        }
                    }
                    "created_at" => {
                        if sort_clause.ascending {
                            query = query.then_order_by(created_at.asc());
                        } else {
                            query = query.then_order_by(created_at.desc());
                        }
                    }
                    "created_by" => {
                        if sort_clause.ascending {
                            query = query.then_order_by(created_by.asc());
                        } else {
                            query = query.then_order_by(created_by.desc());
                        }
                    }
                    // Don't add to the order by clause of the sort key isn't recognized
                    &_ => {}
                }
            }
        }

        if let Some(param) = params.limit {
            query = query.limit(param);
        }
        if let Some(param) = params.offset {
            query = query.offset(param);
        }

        // Perform the query
        query.load::<Self>(conn)
    }

    /// Inserts a new report_section mapping into the DB
    ///
    /// Creates a new report_section row in the DB using `conn` with the values specified in
    /// `params`
    /// Returns a section containing either the new report_section mapping that was created or an
    /// error if the insert fails for some reason
    pub fn create(
        conn: &PgConnection,
        params: NewReportSection,
    ) -> Result<Self, CreateError> {
        // If there are non-failed run_reports associated with the report associated with this
        // report_section, return an error
        match ReportData::has_nonfailed_run_reports(conn, params.report_id) {
            // If there is a nonfailed run, return an error
            Ok(true) => {
                let err = CreateError::Prohibited(String::from("Attempted to create a report_section when a non-failed run_report exists for the associated report.  Doing so is prohibited"));
                error!("Failed to create due to error: {}", err);
                return Err(err);
            }
            // If there are no nonfailed runs, don't stop execution
            Ok(false) => {}
            // If checking for runs failed for some reason, return an error
            Err(e) => {
                error!("Failed to create due to error: {}", e);
                return Err(CreateError::DB(e));
            }
        }
        // If we made it this far without an error, attempt the create
        Ok(diesel::insert_into(report_section)
            .values(&params)
            .get_result(conn)?)
    }

    /// Deletes a specific report_section row in the DB
    ///
    /// Deletes the report_section row in the DB using `conn` with a report_id equal to
    /// `query_report_id` and a section_id equal to `query_section_id`. Will be unsuccessful if
    /// `query_report_id` corresponds to a report that has nonfailed run_reports associated with it
    /// Returns a section containing either the number of rows deleted or an error if the delete
    /// fails for some reason
    pub fn delete(
        conn: &PgConnection,
        query_report_id: Uuid,
        query_section_id: Uuid,
    ) -> Result<usize, DeleteError> {
        // If there are non-failed run_reports associated with the report associated with this
        // report_section, return an error
        match ReportData::has_nonfailed_run_reports(conn, query_report_id) {
            // If there is a nonfailed run, return an error
            Ok(true) => {
                let err = DeleteError::Prohibited(String::from("Attempted to delete a report_section when a non-failed run_report exists for the associated report.  Doing so is prohibited"));
                error!("Failed to delete due to error: {}", err);
                return Err(err);
            }
            // If there are no nonfailed runs, don't stop execution
            Ok(false) => {}
            // If checking for runs failed for some reason, return an error
            Err(e) => {
                error!("Failed to delete due to error: {}", e);
                return Err(DeleteError::DB(e));
            }
        }
        // If we made it this far without an error, attempt the delete
        Ok(diesel::delete(
            report_section
                .filter(report_id.eq(query_report_id))
                .filter(section_id.eq(query_section_id)),
        )
        .execute(conn)?)
    }
}

#[cfg(test)]
mod tests {

    use super::*;
    use crate::custom_sql_types::{ReportStatusEnum, RunStatusEnum};
    use crate::models::pipeline::{NewPipeline, PipelineData};
    use crate::models::report::{NewReport, ReportData};
    use crate::models::run::{NewRun, RunData};
    use crate::models::run_report::{NewRunReport, RunReportData};
    use crate::models::section::{NewSection, SectionData};
    use crate::models::template::{NewTemplate, TemplateData};
    use crate::models::test::{NewTest, TestData};
    use crate::unit_test_util::*;
    use chrono::Utc;
    use serde_json::json;
    use uuid::Uuid;

    fn insert_test_run(conn: &PgConnection) -> RunData {
        let new_pipeline = NewPipeline {
            name: String::from("Kevin's Pipeline 2"),
            description: Some(String::from("Kevin made this pipeline for testing 2")),
            created_by: Some(String::from("Kevin2@example.com")),
        };

        let pipeline =
            PipelineData::create(conn, new_pipeline).expect("Failed inserting test pipeline");

        let new_template = NewTemplate {
            name: String::from("Kevin's Template2"),
            pipeline_id: pipeline.pipeline_id,
            description: Some(String::from("Kevin made this template for testing2")),
            test_wdl: String::from("testtest"),
            eval_wdl: String::from("evaltest"),
            created_by: Some(String::from("Kevin2@example.com")),
        };

        let template =
            TemplateData::create(conn, new_template).expect("Failed inserting test template");

        let new_test = NewTest {
            name: String::from("Kevin's Test"),
            template_id: template.template_id,
            description: Some(String::from("Kevin made this test for testing")),
            test_input_defaults: Some(serde_json::from_str("{\"test\":\"test\"}").unwrap()),
            eval_input_defaults: Some(serde_json::from_str("{\"eval\":\"test\"}").unwrap()),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let test = TestData::create(conn, new_test).expect("Failed inserting test test");

        let new_run = NewRun {
            test_id: test.test_id,
            name: String::from("Kevin's test run"),
            status: RunStatusEnum::Succeeded,
            test_input: serde_json::from_str("{\"test\":\"1\"}").unwrap(),
            eval_input: serde_json::from_str("{}").unwrap(),
            test_cromwell_job_id: Some(String::from("123456789")),
            eval_cromwell_job_id: Some(String::from("12345678902")),
            created_by: Some(String::from("Kevin@example.com")),
            finished_at: Some(Utc::now().naive_utc()),
        };

        RunData::create(&conn, new_run).expect("Failed to insert run")
    }

    fn insert_test_report_section(conn: &PgConnection) -> ReportSectionData {
        let new_report = NewReport {
            name: String::from("Kevin's Report"),
            description: Some(String::from("Kevin made this report for testing")),
            metadata: json!({"metadata":[{"test":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let report = ReportData::create(conn, new_report).expect("Failed inserting test report");

        let new_section = NewSection {
            name: String::from("Name"),
            description: Some(String::from("Description")),
            contents: json!({"cells":[{"test":"test"}]}),
            created_by: Some(String::from("Test@example.com")),
        };

        let section =
            SectionData::create(conn, new_section).expect("Failed inserting test section");

        let new_report_section = NewReportSection {
            section_id: section.section_id,
            report_id: report.report_id,
            position: 0,
            created_by: Some(String::from("Kevin@example.com")),
        };

        ReportSectionData::create(conn, new_report_section)
            .expect("Failed inserting test report_section")
    }

    fn insert_test_report_and_section(conn: &PgConnection) -> (ReportData, SectionData) {
        let new_report = NewReport {
            name: String::from("Kevin's Report"),
            description: Some(String::from("Kevin made this report for testing")),
            metadata: json!({"metadata":[{"test":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let report = ReportData::create(conn, new_report).expect("Failed inserting test report");

        let new_section = NewSection {
            name: String::from("Name"),
            description: Some(String::from("Description")),
            contents: json!({"cells":[{"test":"test"}]}),
            created_by: Some(String::from("Test@example.com")),
        };

        let section =
            SectionData::create(conn, new_section).expect("Failed inserting test section");

        (report, section)
    }

    fn insert_test_report_sections(conn: &PgConnection) -> Vec<ReportSectionData> {
        let mut report_sections = Vec::new();

        let new_report = NewReport {
            name: String::from("Kevin's Report2"),
            description: Some(String::from("Kevin made this report for testing")),
            metadata: json!({"metadata":[{"test2":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let report = ReportData::create(conn, new_report).expect("Failed inserting test report");

        let new_section = NewSection {
            name: String::from("Name1"),
            description: Some(String::from("Description4")),
            contents: json!({"cells":[{"test1":"test"}]}),
            created_by: Some(String::from("Test@example.com")),
        };

        let section =
            SectionData::create(conn, new_section).expect("Failed inserting test section");

        let new_report_section = NewReportSection {
            section_id: section.section_id,
            report_id: report.report_id,
            position: 1,
            created_by: Some(String::from("Kevin@example.com")),
        };

        report_sections.push(
            ReportSectionData::create(conn, new_report_section)
                .expect("Failed inserting test report_section"),
        );

        let new_report = NewReport {
            name: String::from("Kevin's Report3"),
            description: Some(String::from("Kevin made this report for testing")),
            metadata: json!({"metadata":[{"test2":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let report = ReportData::create(conn, new_report).expect("Failed inserting test report");

        let new_section = NewSection {
            name: String::from("Name2"),
            description: Some(String::from("Description5")),
            contents: json!({"cells":[{"test2":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let section =
            SectionData::create(conn, new_section).expect("Failed inserting test section");

        let new_report_section = NewReportSection {
            section_id: section.section_id,
            report_id: report.report_id,
            position: 2,
            created_by: Some(String::from("Kevin@example.com")),
        };

        report_sections.push(
            ReportSectionData::create(conn, new_report_section)
                .expect("Failed inserting test report_section"),
        );

        let new_report = NewReport {
            name: String::from("Kevin's Report4"),
            description: Some(String::from("Kevin made this report for testing")),
            metadata: json!({"metadata":[{"test4":"test"}]}),
            created_by: Some(String::from("Kevin@example.com")),
        };

        let report = ReportData::create(conn, new_report).expect("Failed inserting test report");

        let new_section = NewSection {
            name: String::from("Name5"),
            description: Some(String::from("Description12")),
            contents: json!({"cells":[{"test5":"test"}]}),
            created_by: Some(String::from("Test@example.com")),
        };

        let section =
            SectionData::create(conn, new_section).expect("Failed inserting test section");

        let new_report_section = NewReportSection {
            section_id: section.section_id,
            report_id: report.report_id,
            position: 3,
            created_by: Some(String::from("Kelvin@example.com")),
        };

        report_sections.push(
            ReportSectionData::create(conn, new_report_section)
                .expect("Failed inserting test report_section"),
        );

        report_sections
    }

    fn insert_test_run_report_failed_with_report_id(
        conn: &PgConnection,
        id: Uuid,
    ) -> RunReportData {
        let run = insert_test_run(conn);

        let new_run_report = NewRunReport {
            run_id: run.run_id,
            report_id: id,
            status: ReportStatusEnum::Failed,
            cromwell_job_id: Some(String::from("testtesttesttest")),
            results: None,
            created_by: Some(String::from("Kevin@example.com")),
            finished_at: Some(Utc::now().naive_utc()),
        };

        RunReportData::create(conn, new_run_report).expect("Failed inserting test run_report")
    }

    fn insert_test_run_report_non_failed_with_report_id(
        conn: &PgConnection,
        id: Uuid,
    ) -> RunReportData {
        let run = insert_test_run(conn);

        let new_run_report = NewRunReport {
            run_id: run.run_id,
            report_id: id,
            status: ReportStatusEnum::Running,
            cromwell_job_id: Some(String::from("testtesttesttest")),
            results: None,
            created_by: Some(String::from("Kevin@example.com")),
            finished_at: None,
        };

        RunReportData::create(conn, new_run_report).expect("Failed inserting test run_report")
    }

    #[test]
    fn find_by_report_and_section_exists() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);

        let found_report_section = ReportSectionData::find_by_report_and_section(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        )
        .expect("Failed to retrieve test report_section by id.");

        assert_eq!(found_report_section, test_report_section);
    }

    #[test]
    fn find_by_id_not_exists() {
        let conn = get_test_db_connection();

        let nonexistent_report_section =
            ReportSectionData::find_by_report_and_section(&conn, Uuid::new_v4(), Uuid::new_v4());

        assert!(matches!(
            nonexistent_report_section,
            Err(diesel::result::Error::NotFound)
        ));
    }

    #[test]
    fn find_with_report_id() {
        let conn = get_test_db_connection();

        let test_report_sections = insert_test_report_sections(&conn);

        let test_query = ReportSectionQuery {
            report_id: Some(test_report_sections[0].report_id),
            section_id: None,
            position: None,
            created_before: None,
            created_after: None,
            created_by: None,
            sort: None,
            limit: None,
            offset: None,
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 1);
        assert_eq!(found_report_sections[0], test_report_sections[0]);
    }

    #[test]
    fn find_with_section_id() {
        let conn = get_test_db_connection();

        let test_report_sections = insert_test_report_sections(&conn);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: Some(test_report_sections[1].section_id),
            position: None,
            created_before: None,
            created_after: None,
            created_by: None,
            sort: None,
            limit: None,
            offset: None,
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 1);
        assert_eq!(found_report_sections[0], test_report_sections[1]);
    }

    #[test]
    fn find_with_position() {
        let conn = get_test_db_connection();

        let test_report_sections = insert_test_report_sections(&conn);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: None,
            position: Some(test_report_sections[2].position.clone()),
            created_before: None,
            created_after: None,
            created_by: None,
            sort: None,
            limit: None,
            offset: None,
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 1);
        assert_eq!(found_report_sections[0], test_report_sections[2]);
    }

    #[test]
    fn find_with_sort_and_limit_and_offset() {
        let conn = get_test_db_connection();

        let test_report_sections = insert_test_report_sections(&conn);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: None,
            position: None,
            created_before: None,
            created_after: None,
            created_by: Some(String::from("Kevin@example.com")),
            sort: Some(String::from("desc(position)")),
            limit: Some(1),
            offset: Some(0),
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 1);
        assert_eq!(found_report_sections[0], test_report_sections[1]);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: None,
            position: None,
            created_before: None,
            created_after: None,
            created_by: Some(String::from("Kevin@example.com")),
            sort: Some(String::from("desc(position)")),
            limit: Some(1),
            offset: Some(1),
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 1);
        assert_eq!(found_report_sections[0], test_report_sections[0]);
    }

    #[test]
    fn find_with_created_before_and_created_after() {
        let conn = get_test_db_connection();

        insert_test_report_sections(&conn);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: None,
            position: None,
            created_before: None,
            created_after: Some("2099-01-01T00:00:00".parse::<NaiveDateTime>().unwrap()),
            created_by: None,
            sort: None,
            limit: None,
            offset: None,
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 0);

        let test_query = ReportSectionQuery {
            report_id: None,
            section_id: None,
            position: None,
            created_before: Some("2099-01-01T00:00:00".parse::<NaiveDateTime>().unwrap()),
            created_after: None,
            created_by: None,
            sort: None,
            limit: None,
            offset: None,
        };

        let found_report_sections =
            ReportSectionData::find(&conn, test_query).expect("Failed to find report_sections");

        assert_eq!(found_report_sections.len(), 3);
    }

    #[test]
    fn create_success() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);

        assert_eq!(test_report_section.position, 0);
        assert_eq!(
            test_report_section.created_by,
            Some(String::from("Kevin@example.com"))
        );
    }

    #[test]
    fn create_failure_same_section_and_report() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);

        let copy_report_section = NewReportSection {
            report_id: test_report_section.report_id,
            section_id: test_report_section.section_id,
            position: 2,
            created_by: Some(String::from("Kevin2@example.com")),
        };

        let new_report_section = ReportSectionData::create(&conn, copy_report_section);

        assert!(matches!(
            new_report_section,
            Err(
                CreateError::DB(
                    diesel::result::Error::DatabaseError(
                        diesel::result::DatabaseErrorKind::UniqueViolation,
                        _,
                    ),
                )
            )
        ));
    }

    #[test]
    fn create_failure_prohibited() {
        let conn = get_test_db_connection();

        let (test_report, test_section) = insert_test_report_and_section(&conn);
        insert_test_run_report_non_failed_with_report_id(&conn, test_report.report_id);

        let copy_report_section = NewReportSection {
            report_id: test_report.report_id,
            section_id: test_section.section_id,
            position: 2,
            created_by: Some(String::from("Kevin2@example.com")),
        };

        let new_report_section = ReportSectionData::create(&conn, copy_report_section);

        assert!(matches!(
            new_report_section,
            Err(CreateError::Prohibited(_))
        ));
    }

    #[test]
    fn delete_success() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);
        insert_test_run_report_failed_with_report_id(&conn, test_report_section.report_id);

        let delete_section = ReportSectionData::delete(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        )
        .unwrap();

        assert_eq!(delete_section, 1);

        let deleted_report_section = ReportSectionData::find_by_report_and_section(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        );

        assert!(matches!(
            deleted_report_section,
            Err(diesel::result::Error::NotFound)
        ));
    }

    #[test]
    fn delete_success_no_runs() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);

        let delete_section = ReportSectionData::delete(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        )
        .unwrap();

        assert_eq!(delete_section, 1);

        let deleted_report_section = ReportSectionData::find_by_report_and_section(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        );

        assert!(matches!(
            deleted_report_section,
            Err(diesel::result::Error::NotFound)
        ));
    }

    #[test]
    fn delete_failure_prohibited() {
        let conn = get_test_db_connection();

        let test_report_section = insert_test_report_section(&conn);
        insert_test_run_report_non_failed_with_report_id(&conn, test_report_section.report_id);

        let delete_section = ReportSectionData::delete(
            &conn,
            test_report_section.report_id,
            test_report_section.section_id,
        );

        assert!(matches!(delete_section, Err(DeleteError::Prohibited(_))));
    }
}
